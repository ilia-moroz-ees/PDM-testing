/**
 * These arguments were used when this file was generated. They will be automatically applied on subsequent loads
 * via the GUI or CLI. Run CLI with '--help' for additional information on how to override these arguments.
 * @cliArgs --device "AM263Px" --part "AM263P4" --package "ZCZ_S" --context "r5fss0-0" --product "MCU_PLUS_SDK_AM263Px@10.02.00"
 * @v2CliArgs --device "AM263P4-Q1" --package "NFBGA (ZCZ-S)" --context "r5fss0-0" --product "MCU_PLUS_SDK_AM263Px@10.02.00"
 * @versions {"tool":"1.23.0+4000"}
 */

/**
 * Import the modules used in this configuration.
 */
const ioexp           = scripting.addModule("/board/ioexp/ioexp", {}, false);
const ioexp1          = ioexp.addInstance();
const adc             = scripting.addModule("/drivers/adc/adc", {}, false);
const adc1            = adc.addInstance();
const gpio            = scripting.addModule("/drivers/gpio/gpio", {}, false);
const gpio1           = gpio.addInstance();
const gpio2           = gpio.addInstance();
const gpio3           = gpio.addInstance();
const gpio4           = gpio.addInstance();
const gpio5           = gpio.addInstance();
const gpio6           = gpio.addInstance();
const gpio7           = gpio.addInstance();
const gpio8           = gpio.addInstance();
const gpio9           = gpio.addInstance();
const gpio10          = gpio.addInstance();
const gpio11          = gpio.addInstance();
const gpio12          = gpio.addInstance();
const gpio13          = gpio.addInstance();
const gpio14          = gpio.addInstance();
const gpio15          = gpio.addInstance();
const gpio16          = gpio.addInstance();
const i2c             = scripting.addModule("/drivers/i2c/i2c", {}, false);
const i2c1            = i2c.addInstance();
const i2c2            = i2c.addInstance();
const i2c3            = i2c.addInstance();
const mcspi           = scripting.addModule("/drivers/mcspi/mcspi", {}, false);
const mcspi1          = mcspi.addInstance();
const mcspi2          = mcspi.addInstance();
const debug_log       = scripting.addModule("/kernel/dpl/debug_log");
const dpl_cfg         = scripting.addModule("/kernel/dpl/dpl_cfg");
const mpu_armv7       = scripting.addModule("/kernel/dpl/mpu_armv7", {}, false);
const mpu_armv71      = mpu_armv7.addInstance();
const mpu_armv72      = mpu_armv7.addInstance();
const mpu_armv73      = mpu_armv7.addInstance();
const mpu_armv74      = mpu_armv7.addInstance();
const mpu_armv75      = mpu_armv7.addInstance();
const mpu_armv76      = mpu_armv7.addInstance();
const default_linker  = scripting.addModule("/memory_configurator/default_linker", {}, false);
const default_linker1 = default_linker.addInstance();
const general         = scripting.addModule("/memory_configurator/general", {}, false);
const general1        = general.addInstance();
const region          = scripting.addModule("/memory_configurator/region", {}, false);
const region1         = region.addInstance();
const section         = scripting.addModule("/memory_configurator/section", {}, false);
const section1        = section.addInstance();
const section2        = section.addInstance();
const section3        = section.addInstance();
const section4        = section.addInstance();
const section5        = section.addInstance();
const section6        = section.addInstance();
const section7        = section.addInstance();
const section8        = section.addInstance();
const section9        = section.addInstance();
const section10       = section.addInstance();
const section11       = section.addInstance();
const section12       = section.addInstance();
const gpio_int_xbar   = scripting.addModule("/xbar/gpio_int_xbar/gpio_int_xbar", {}, false);
const gpio_int_xbar1  = gpio_int_xbar.addInstance();
const gpio_int_xbar2  = gpio_int_xbar.addInstance();

/**
 * Write custom configuration values to the imported modules.
 */
ioexp1.$name                                    = "CONFIG_IOEXP0";
ioexp1.TCA6424ARGJR_port1_pinSPI1_MUX_SEL_mode  = 0;
ioexp1.TCA6424ARGJR_port1_pinSPI1_MUX_SEL_state = 1;
ioexp1.TCA6424ARGJR_port1_pinI2C0_MUX_SEL_mode  = 0;
ioexp1.TCA6424ARGJR_port1_pinI2C0_MUX_SEL_state = 1;

adc1.$name               = "ADC1";
adc1.adcClockPrescaler   = "ADC_CLK_DIV_4_0";
adc1.enableConverter     = true;
adc1.enableInterrupt1    = true;
adc1.soc2Channel         = "ADC_CH_ADCIN2";
adc1.soc3Channel         = "ADC_CH_ADCIN3";
adc1.soc4Channel         = "ADC_CH_ADCIN4";
adc1.soc5Channel         = "ADC_CH_ADCIN5";
adc1.interrupt1SOCSource = "ADC_SOC_NUMBER2";
adc1.interrupt3SOCSource = "ADC_SOC_NUMBER4";
adc1.interrupt4SOCSource = "ADC_SOC_NUMBER5";
adc1.soc1Channel         = "ADC_CH_ADCIN1";
adc1.ADC.$assign         = "ADC1";
adc1.ADC.AIN0.pu_pd      = "pd";
adc1.ADC.AIN1.pu_pd      = "pd";
adc1.ADC.AIN2.pu_pd      = "pd";
adc1.ADC.AIN3.pu_pd      = "pd";
adc1.ADC.AIN4.pu_pd      = "pd";
adc1.ADC.AIN5.pu_pd      = "pd";

gpio1.trigType       = "FALL_EDGE";
gpio1.enableIntr     = true;
gpio1.$name          = "GPIO48";
gpio1.GPIO_n.$assign = "EPWM2_B";

gpio2.$name          = "GPIO44";
gpio2.defaultValue   = "1";
gpio2.trigType       = "FALL_EDGE";
gpio2.enableIntr     = true;
gpio2.GPIO_n.$assign = "EPWM0_B";

gpio3.$name          = "GPIO45";
gpio3.trigType       = "FALL_EDGE";
gpio3.enableIntr     = true;
gpio3.GPIO_n.$assign = "EPWM1_A";

gpio4.$name          = "GPIO46";
gpio4.trigType       = "FALL_EDGE";
gpio4.enableIntr     = true;
gpio4.GPIO_n.$assign = "EPWM1_B";

gpio5.$name          = "GPIO51";
gpio5.enableIntr     = true;
gpio5.trigType       = "FALL_EDGE";
gpio5.GPIO_n.$assign = "EPWM4_A";

gpio6.$name          = "GPIO52";
gpio6.enableIntr     = true;
gpio6.trigType       = "FALL_EDGE";
gpio6.GPIO_n.$assign = "EPWM4_B";

gpio7.$name          = "GPIO53";
gpio7.pinDir         = "OUTPUT";
gpio7.GPIO_n.$assign = "EPWM5_A";

gpio8.$name          = "GPIO54";
gpio8.pinDir         = "OUTPUT";
gpio8.GPIO_n.$assign = "EPWM5_B";

gpio9.$name          = "GPIO123";
gpio9.pinDir         = "OUTPUT";
gpio9.GPIO_n.$assign = "SDFM0_D0";

gpio10.pinDir         = "OUTPUT";
gpio10.$name          = "GPIO136";
gpio10.GPIO_n.$assign = "MCAN2_TX";

gpio11.pinDir         = "OUTPUT";
gpio11.$name          = "GPIO127";
gpio11.GPIO_n.$assign = "SDFM0_D2";

gpio12.$name          = "GPIO126";
gpio12.pinDir         = "OUTPUT";
gpio12.GPIO_n.$assign = "SDFM0_CLK2";

gpio13.$name          = "SPI0_CS";
gpio13.pinDir         = "OUTPUT";
gpio13.GPIO_n.$assign = "SPI0_CS0";

gpio14.$name          = "SPI1_CS";
gpio14.pinDir         = "OUTPUT";
gpio14.GPIO_n.$assign = "SPI1_CS0";

gpio15.$name          = "GPIO50";
gpio15.enableIntr     = true;
gpio15.trigType       = "FALL_EDGE";
gpio15.GPIO_n.$assign = "EPWM3_B";

gpio16.$name          = "GPIO49";
gpio16.trigType       = "FALL_EDGE";
gpio16.enableIntr     = true;
gpio16.GPIO_n.$assign = "EPWM3_A";

i2c1.$name              = "CONFIG_I2C0";
ioexp1.peripheralDriver = i2c1;
i2c1.I2C.$assign        = "I2C2";
i2c1.I2C.SCL.$assign    = "UART0_RTSn";
i2c1.I2C.SDA.$assign    = "UART0_CTSn";
i2c1.I2C_child.$name    = "drivers_i2c_v1_i2c_v1_template0";

i2c2.bitRate         = "100KHZ";
i2c2.$name           = "I2C0";
i2c2.I2C.$assign     = "I2C0";
i2c2.I2C.SCL.$assign = "I2C0_SCL";
i2c2.I2C.SDA.$assign = "I2C0_SDA";
i2c2.I2C_child.$name = "drivers_i2c_v1_i2c_v1_template1";

i2c3.$name           = "I2C1";
i2c3.bitRate         = "100KHZ";
i2c3.I2C.$assign     = "I2C1";
i2c3.I2C.SCL.$assign = "I2C1_SCL";
i2c3.I2C.SDA.$assign = "I2C1_SDA";
i2c3.I2C_child.$name = "drivers_i2c_v1_i2c_v1_template2";

mcspi1.$name                       = "SPI0";
mcspi1.mcspiChannel[0].$name       = "CONFIG_MCSPI_CH0";
mcspi1.mcspiChannel[0].CSn.$assign = "SPI0_CS0";
mcspi1.mcspiChannel[0].CSn.$used   = false;
mcspi1.child.$name                 = "drivers_mcspi_v1_mcspi_v1_template0";

mcspi2.$name                         = "SPI1";
mcspi2.SPI.$assign                   = "SPI1";
mcspi2.mcspiChannel[0].$name         = "CONFIG_MCSPI_CH1";
mcspi2.mcspiChannel[0].advanced      = true;
mcspi2.mcspiChannel[0].defaultTxData = 0xF;
mcspi2.mcspiChannel[0].CSn.$used     = false;
mcspi2.child.$name                   = "drivers_mcspi_v1_mcspi_v1_template1";

const edma                  = scripting.addModule("/drivers/edma/edma", {}, false);
const edma1                 = edma.addInstance({}, false);
edma1.$name                 = "CONFIG_EDMA0";
mcspi1.edmaDriver           = edma1;
mcspi2.edmaDriver           = edma1;
edma1.edmaRmDmaCh[0].$name  = "CONFIG_EDMA_RM0";
edma1.edmaRmQdmaCh[0].$name = "CONFIG_EDMA_RM1";
edma1.edmaRmTcc[0].$name    = "CONFIG_EDMA_RM2";
edma1.edmaRmParam[0].$name  = "CONFIG_EDMA_RM3";

const soc_ctrl_adc    = scripting.addModule("/drivers/soc_ctrl/v0/subModules/soc_ctrl_adc", {}, false);
const soc_ctrl_adc1   = soc_ctrl_adc.addInstance({}, false);
soc_ctrl_adc1.$name   = "soc_ctrl_adc0";
adc.adcReferences     = soc_ctrl_adc1;
const soc_ctrl        = scripting.addModule("/drivers/soc_ctrl/soc_ctrl", {}, false);
soc_ctrl.soc_ctrl_adc = soc_ctrl_adc1;

const soc_ctrl_cmpss    = scripting.addModule("/drivers/soc_ctrl/v0/subModules/soc_ctrl_cmpss", {}, false);
const soc_ctrl_cmpss1   = soc_ctrl_cmpss.addInstance({}, false);
soc_ctrl_cmpss1.$name   = "soc_ctrl_cmpss0";
soc_ctrl.soc_ctrl_cmpss = soc_ctrl_cmpss1;

const soc_ctrl_ecap    = scripting.addModule("/drivers/soc_ctrl/v0/subModules/soc_ctrl_ecap", {}, false);
const soc_ctrl_ecap1   = soc_ctrl_ecap.addInstance({}, false);
soc_ctrl_ecap1.$name   = "soc_ctrl_ecap0";
soc_ctrl.soc_ctrl_ecap = soc_ctrl_ecap1;

const soc_ctrl_epwm    = scripting.addModule("/drivers/soc_ctrl/v0/subModules/soc_ctrl_epwm", {}, false);
const soc_ctrl_epwm1   = soc_ctrl_epwm.addInstance({}, false);
soc_ctrl_epwm1.$name   = "soc_ctrl_epwm0";
soc_ctrl.soc_ctrl_epwm = soc_ctrl_epwm1;

const soc_ctrl_sdfm    = scripting.addModule("/drivers/soc_ctrl/v0/subModules/soc_ctrl_sdfm", {}, false);
const soc_ctrl_sdfm1   = soc_ctrl_sdfm.addInstance({}, false);
soc_ctrl_sdfm1.$name   = "soc_ctrl_sdfm0";
soc_ctrl.soc_ctrl_sdfm = soc_ctrl_sdfm1;

debug_log.enableUartLog            = true;
debug_log.enableLogZoneInfo        = true;
debug_log.enableSharedMemLogReader = true;
debug_log.enableSharedMemLog       = true;
debug_log.uartLog.$name            = "CONFIG_UART0";
debug_log.uartLog.UART.$assign     = "UART0";
debug_log.uartLog.UART.RXD.$assign = "UART0_RXD";
debug_log.uartLog.UART.TXD.$assign = "UART0_TXD";
debug_log.uartLog.child.$name      = "drivers_uart_v2_uart_v2_template0";

mpu_armv71.$name             = "CONFIG_MPU_REGION0";
mpu_armv71.size              = 31;
mpu_armv71.attributes        = "Device";
mpu_armv71.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv71.allowExecute      = false;

mpu_armv72.$name             = "CONFIG_MPU_REGION1";
mpu_armv72.size              = 15;
mpu_armv72.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv73.$name             = "CONFIG_MPU_REGION2";
mpu_armv73.baseAddr          = 0x80000;
mpu_armv73.size              = 15;
mpu_armv73.accessPermissions = "Supervisor RD+WR, User RD";

mpu_armv74.$name             = "CONFIG_MPU_REGION3";
mpu_armv74.accessPermissions = "Supervisor RD+WR, User RD";
mpu_armv74.baseAddr          = 0x70000000;
mpu_armv74.size              = 22;

mpu_armv75.$name        = "CONFIG_MPU_REGION4";
mpu_armv75.baseAddr     = 0x50D00000;
mpu_armv75.size         = 14;
mpu_armv75.allowExecute = false;
mpu_armv75.attributes   = "Device";

mpu_armv76.$name        = "CONFIG_MPU_REGION5";
mpu_armv76.baseAddr     = 0x72000000;
mpu_armv76.size         = 14;
mpu_armv76.allowExecute = false;
mpu_armv76.attributes   = "NonCached";

default_linker1.$name = "memory_configurator_default_linker0";

general1.$name        = "CONFIG_GENERAL0";
general1.linker.$name = "TIARMCLANG0";

region1.$name                                = "MEMORY_REGION_CONFIGURATION0";
region1.memory_region.create(11);
region1.memory_region[0].type                = "TCMA";
region1.memory_region[0].$name               = "R5F_VECS";
region1.memory_region[0].size                = 0x40;
region1.memory_region[0].auto                = false;
region1.memory_region[1].type                = "TCMA";
region1.memory_region[1].$name               = "R5F_TCMA";
region1.memory_region[1].size                = 0x7FC0;
region1.memory_region[2].type                = "TCMB";
region1.memory_region[2].size                = 0x8000;
region1.memory_region[2].$name               = "R5F_TCMB";
region1.memory_region[3].$name               = "SBL";
region1.memory_region[3].auto                = false;
region1.memory_region[3].size                = 0x40000;
region1.memory_region[4].$name               = "OCRAM";
region1.memory_region[4].auto                = false;
region1.memory_region[4].manualStartAddress  = 0x70040000;
region1.memory_region[4].size                = 0x40000;
region1.memory_region[5].type                = "FLASH";
region1.memory_region[5].auto                = false;
region1.memory_region[5].manualStartAddress  = 0x60100000;
region1.memory_region[5].size                = 0x80000;
region1.memory_region[5].$name               = "FLASH";
region1.memory_region[6].$name               = "USER_SHM_MEM";
region1.memory_region[6].auto                = false;
region1.memory_region[6].manualStartAddress  = 0x701D0000;
region1.memory_region[6].size                = 0x4000;
region1.memory_region[6].isShared            = true;
region1.memory_region[6].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[7].$name               = "LOG_SHM_MEM";
region1.memory_region[7].auto                = false;
region1.memory_region[7].manualStartAddress  = 0x701D4000;
region1.memory_region[7].size                = 0x4000;
region1.memory_region[7].isShared            = true;
region1.memory_region[7].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[8].type                = "CUSTOM";
region1.memory_region[8].$name               = "RTOS_NORTOS_IPC_SHM_MEM";
region1.memory_region[8].auto                = false;
region1.memory_region[8].manualStartAddress  = 0x72000000;
region1.memory_region[8].size                = 0x3E80;
region1.memory_region[8].isShared            = true;
region1.memory_region[8].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[9].type                = "CUSTOM";
region1.memory_region[9].$name               = "MAILBOX_HSM";
region1.memory_region[9].auto                = false;
region1.memory_region[9].manualStartAddress  = 0x44000000;
region1.memory_region[9].size                = 0x3CE;
region1.memory_region[9].isShared            = true;
region1.memory_region[9].shared_cores        = ["r5fss0-1","r5fss1-0","r5fss1-1"];
region1.memory_region[10].type               = "CUSTOM";
region1.memory_region[10].$name              = "MAILBOX_R5F";
region1.memory_region[10].auto               = false;
region1.memory_region[10].manualStartAddress = 0x44000400;
region1.memory_region[10].size               = 0x3CE;
region1.memory_region[10].isShared           = true;
region1.memory_region[10].shared_cores       = ["r5fss0-1","r5fss1-0","r5fss1-1"];

section1.load_memory                  = "R5F_VECS";
section1.group                        = false;
section1.$name                        = "Vector Table";
section1.output_section.create(1);
section1.output_section[0].$name      = ".vectors";
section1.output_section[0].palignment = true;

section2.load_memory                  = "OCRAM";
section2.$name                        = "Text Segments";
section2.output_section.create(5);
section2.output_section[0].$name      = ".text.hwi";
section2.output_section[0].palignment = true;
section2.output_section[1].$name      = ".text.cache";
section2.output_section[1].palignment = true;
section2.output_section[2].$name      = ".text.mpu";
section2.output_section[2].palignment = true;
section2.output_section[3].$name      = ".text.boot";
section2.output_section[3].palignment = true;
section2.output_section[4].$name      = ".text:abort";
section2.output_section[4].palignment = true;

section3.load_memory                  = "OCRAM";
section3.$name                        = "Code and Read-Only Data";
section3.output_section.create(2);
section3.output_section[0].$name      = ".text";
section3.output_section[0].palignment = true;
section3.output_section[1].$name      = ".rodata";
section3.output_section[1].palignment = true;

section4.load_memory                  = "OCRAM";
section4.$name                        = "Data Segment";
section4.output_section.create(1);
section4.output_section[0].$name      = ".data";
section4.output_section[0].palignment = true;

section5.load_memory                             = "OCRAM";
section5.$name                                   = "Memory Segments";
section5.output_section.create(3);
section5.output_section[0].$name                 = ".bss";
section5.output_section[0].output_sections_start = "__BSS_START";
section5.output_section[0].output_sections_end   = "__BSS_END";
section5.output_section[0].palignment            = true;
section5.output_section[1].$name                 = ".sysmem";
section5.output_section[1].palignment            = true;
section5.output_section[2].$name                 = ".stack";
section5.output_section[2].palignment            = true;

section6.load_memory                              = "OCRAM";
section6.$name                                    = "Stack Segments";
section6.output_section.create(5);
section6.output_section[0].$name                  = ".irqstack";
section6.output_section[0].output_sections_start  = "__IRQ_STACK_START";
section6.output_section[0].output_sections_end    = "__IRQ_STACK_END";
section6.output_section[0].input_section.create(1);
section6.output_section[0].input_section[0].$name = ". = . + __IRQ_STACK_SIZE;";
section6.output_section[1].$name                  = ".fiqstack";
section6.output_section[1].output_sections_start  = "__FIQ_STACK_START";
section6.output_section[1].output_sections_end    = "__FIQ_STACK_END";
section6.output_section[1].input_section.create(1);
section6.output_section[1].input_section[0].$name = ". = . + __FIQ_STACK_SIZE;";
section6.output_section[2].$name                  = ".svcstack";
section6.output_section[2].output_sections_start  = "__SVC_STACK_START";
section6.output_section[2].output_sections_end    = "__SVC_STACK_END";
section6.output_section[2].input_section.create(1);
section6.output_section[2].input_section[0].$name = ". = . + __SVC_STACK_SIZE;";
section6.output_section[3].$name                  = ".abortstack";
section6.output_section[3].output_sections_start  = "__ABORT_STACK_START";
section6.output_section[3].output_sections_end    = "__ABORT_STACK_END";
section6.output_section[3].input_section.create(1);
section6.output_section[3].input_section[0].$name = ". = . + __ABORT_STACK_SIZE;";
section6.output_section[4].$name                  = ".undefinedstack";
section6.output_section[4].output_sections_start  = "__UNDEFINED_STACK_START";
section6.output_section[4].output_sections_end    = "__UNDEFINED_STACK_END";
section6.output_section[4].input_section.create(1);
section6.output_section[4].input_section[0].$name = ". = . + __UNDEFINED_STACK_SIZE;";

section7.load_memory                  = "OCRAM";
section7.$name                        = "Initialization and Exception Handling";
section7.output_section.create(3);
section7.output_section[0].$name      = ".ARM.exidx";
section7.output_section[0].palignment = true;
section7.output_section[1].$name      = ".init_array";
section7.output_section[1].palignment = true;
section7.output_section[2].$name      = ".fini_array";
section7.output_section[2].palignment = true;

section8.load_memory                 = "USER_SHM_MEM";
section8.type                        = "NOLOAD";
section8.$name                       = "User Shared Memory";
section8.group                       = false;
section8.output_section.create(1);
section8.output_section[0].$name     = ".bss.user_shared_mem";
section8.output_section[0].alignment = 0;

section9.load_memory                 = "LOG_SHM_MEM";
section9.$name                       = "Log Shared Memory";
section9.group                       = false;
section9.type                        = "NOLOAD";
section9.output_section.create(1);
section9.output_section[0].$name     = ".bss.log_shared_mem";
section9.output_section[0].alignment = 0;

section10.load_memory                 = "RTOS_NORTOS_IPC_SHM_MEM";
section10.type                        = "NOLOAD";
section10.$name                       = "IPC Shared Memory";
section10.group                       = false;
section10.output_section.create(1);
section10.output_section[0].$name     = ".bss.ipc_vring_mem";
section10.output_section[0].alignment = 0;

section11.load_memory                 = "MAILBOX_HSM";
section11.type                        = "NOLOAD";
section11.$name                       = "SIPC HSM Queue Memory";
section11.group                       = false;
section11.output_section.create(1);
section11.output_section[0].$name     = ".bss.sipc_hsm_queue_mem";
section11.output_section[0].alignment = 0;

section12.load_memory                 = "MAILBOX_R5F";
section12.$name                       = "SIPC R5F Queue Memory";
section12.group                       = false;
section12.type                        = "NOLOAD";
section12.output_section.create(1);
section12.output_section[0].$name     = ".bss.sipc_secure_host_queue_mem";
section12.output_section[0].alignment = 0;

gpio_int_xbar1.instance   = "GPIO_INT_XBAR_VIM_MODULE0_0";
gpio_int_xbar1.xbarOutput = "GPIO_INT_XBAR_GPIO_0_BANK_INTR_2";
gpio_int_xbar1.$name      = "GPIO0_BANK_2_INT_XBAR";

gpio_int_xbar2.$name      = "GPIO0_BANK3_INT_XBAR";
gpio_int_xbar2.xbarOutput = "GPIO_INT_XBAR_GPIO_0_BANK_INTR_3";
gpio_int_xbar2.instance   = "GPIO_INT_XBAR_VIM_MODULE0_1";

/**
 * Pinmux solution for unlocked pins/peripherals. This ensures that minor changes to the automatic solver in a future
 * version of the tool will not impact the pinmux you originally saw.  These lines can be completely deleted in order to
 * re-solve from scratch.
 */
adc1.ADC.AIN0.$suggestSolution  = "ADC1_AIN0";
adc1.ADC.AIN1.$suggestSolution  = "ADC1_AIN1";
adc1.ADC.AIN2.$suggestSolution  = "ADC1_AIN2";
adc1.ADC.AIN3.$suggestSolution  = "ADC1_AIN3";
adc1.ADC.AIN4.$suggestSolution  = "ADC1_AIN4";
adc1.ADC.AIN5.$suggestSolution  = "ADC1_AIN5";
mcspi1.SPI.$suggestSolution     = "SPI0";
mcspi1.SPI.CLK.$suggestSolution = "SPI0_CLK";
mcspi1.SPI.D0.$suggestSolution  = "SPI0_D0";
mcspi1.SPI.D1.$suggestSolution  = "SPI0_D1";
mcspi2.SPI.CLK.$suggestSolution = "SPI1_CLK";
mcspi2.SPI.D0.$suggestSolution  = "SPI1_D0";
mcspi2.SPI.D1.$suggestSolution  = "SPI1_D1";
